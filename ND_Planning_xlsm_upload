import streamlit as st
import pandas as pd
import numpy as np
import folium
from streamlit_folium import st_folium
import math
from datetime import timedelta, datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ layout ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
st.set_page_config(layout="wide")

st.title("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡πà‡∏á Rider") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
uploaded_file = st.sidebar.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (ND_Planning.xlsm)", type=["xlsm", "xlsx"])

df = None # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î df ‡πÄ‡∏õ‡πá‡∏ô None ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

if uploaded_file is not None:
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        df = pd.read_excel(uploaded_file, sheet_name="Data", engine="openpyxl")
        st.success("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {e}")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

# --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ df ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ---
if df is not None:
    # ----- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç df is not None) -----

    required_columns = ["Order ID", "LAT", "LON", "SLA STS", "Rider Name", "Time Check"]
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        st.error(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {', '.join(missing_columns)}")
        st.stop()

    merged_df = df.copy()
    merged_df["LAT"] = pd.to_numeric(merged_df["LAT"], errors="coerce")
    merged_df["LON"] = pd.to_numeric(merged_df["LON"], errors="coerce")
    merged_df.dropna(subset=["LAT", "LON"], inplace=True)
    merged_df["Time Check"] = merged_df["Time Check"].astype(str)
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rider Name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    merged_df["Rider Name"] = merged_df["Rider Name"].astype(str).str.strip()


    # ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î MFC
    center_lat = 13.737929161400837
    center_lon = 100.63687556823479

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bearing ‡πÅ‡∏ö‡∏ö vectorized
    def fast_bearing(lat2, lon2):
        dLon = np.radians(lon2 - center_lon)
        lat1 = np.radians(center_lat)
        lat2 = np.radians(lat2)
        y = np.sin(dLon) * np.cos(lat2)
        x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(dLon)
        bearing = np.degrees(np.arctan2(y, x))
        return (bearing + 360) % 360

    merged_df["Bearing"] = fast_bearing(merged_df["LAT"], merged_df["LON"])

    def assign_zone(bearing):
        if 0 <= bearing < 90:
            return "Zone 4"
        elif 90 <= bearing < 180:
            return "Zone 3"
        elif 180 <= bearing < 270:
            return "Zone 2"
        else:
            return "Zone 1"

    merged_df["Zone"] = merged_df["Bearing"].apply(assign_zone)

    # --- ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ---
    st.sidebar.header("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    filtered_df = merged_df.copy()

    # 1. ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á Order ID
    order_options = sorted(merged_df["Order ID"].unique())
    selected_orders = st.sidebar.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Order ID:",
        order_options,
        default=st.session_state.get("selected_orders", [])
    )
    st.session_state["selected_orders"] = selected_orders
    if selected_orders:
        filtered_df = filtered_df[filtered_df["Order ID"].isin(selected_orders)]

    # 2. (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á Rider Name
    rider_options = sorted(merged_df["Rider Name"].unique())
    selected_riders = st.sidebar.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Rider Name:",
        rider_options,
        default=st.session_state.get("selected_riders", [])
    )
    st.session_state["selected_riders"] = selected_riders
    if selected_riders:
        filtered_df = filtered_df[filtered_df["Rider Name"].isin(selected_riders)]

    # 3. ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á Time Check
    time_check_options = sorted(merged_df["Time Check"].unique())
    selected_time_checks = st.sidebar.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Time Check:",
        time_check_options,
        default=st.session_state.get("selected_time_checks", [])
    )
    st.session_state["selected_time_checks"] = selected_time_checks
    if selected_time_checks:
        filtered_df = filtered_df[filtered_df["Time Check"].isin(selected_time_checks)]


    filtered_df = filtered_df.sort_values(by="Order ID", ascending=True)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
    m = folium.Map(location=[center_lat, center_lon], zoom_start=13)
    folium.Marker(location=[center_lat, center_lon], popup="üìçMFC", icon=folium.Icon(color="green", icon="star")).add_to(m)
    folium.Circle(location=[center_lat, center_lon], radius=7000, color='blue', opacity=0.4, fill=True, fill_color='red', fill_opacity=0.05, popup="‡∏£‡∏±‡∏®‡∏°‡∏µ 7 ‡∏Å‡∏°.").add_to(m)

    grouped = filtered_df.groupby(["LAT", "LON"]).agg(
        order_ids=('Order ID', lambda x: ", ".join(sorted(set(map(str, x))))),
        rider_names=('Rider Name', lambda x: ", ".join(sorted(set(map(str, x))))),
        time_checks=('Time Check', lambda x: ", ".join(sorted(set(map(str, x))))),
        zone=('Zone', 'first')
    ).reset_index()

    for idx, row in grouped.iterrows():
        popup_text = f"Order: {row['order_ids']}<br>Rider: {row['rider_names']}<br>Time Check: {row['time_checks']}<br>Zone: {row['zone']}"
        folium.Marker(location=[row["LAT"], row["LON"]], popup=popup_text, icon=folium.Icon(color="blue", icon="info-sign")).add_to(m)

    zone_colors = { "Zone 1": "red", "Zone 2": "orange", "Zone 3": "purple", "Zone 4": "green" }
    st.subheader("‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° Zone")
    for zone, color in zone_colors.items():
        zone_points_df = filtered_df[filtered_df["Zone"] == zone]
        if not zone_points_df.empty:
            route_points = [[center_lat, center_lon]] + zone_points_df[["LAT", "LON"]].values.tolist()
            folium.PolyLine(route_points, color=color, weight=2.5, opacity=0.8, popup=zone).add_to(m)
        else:
            st.info(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {zone} ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á")

    st_folium(m, width="100%", height=1000)
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    columns_to_display = ["Order ID", "Rider Name", "SLA STS", "Time Check", "Zone"]
    st.dataframe(filtered_df[columns_to_display], use_container_width=True)
